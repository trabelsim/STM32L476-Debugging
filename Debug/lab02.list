
lab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080030e4  080030e4  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080030e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000a8  2000000c  080030f4  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000b4  080030f4  000200b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009231  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001694  00000000  00000000  0002926d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008a0  00000000  00000000  0002a908  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007c8  00000000  00000000  0002b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003f42  00000000  00000000  0002b970  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f17  00000000  00000000  0002f8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000327c9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000021ac  00000000  00000000  00032848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003078 	.word	0x08003078

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003078 	.word	0x08003078

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80004de:	2300      	movs	r3, #0
 80004e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e2:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <HAL_Init+0x3c>)
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x3c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 f93c 	bl	800076c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 f80f 	bl	8000518 <HAL_InitTick>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d002      	beq.n	8000506 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000500:	2301      	movs	r3, #1
 8000502:	71fb      	strb	r3, [r7, #7]
 8000504:	e001      	b.n	800050a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000506:	f002 fc67 	bl	8002dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800050a:	79fb      	ldrb	r3, [r7, #7]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40022000 	.word	0x40022000

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <HAL_InitTick+0x68>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d022      	beq.n	8000572 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800052c:	4b15      	ldr	r3, [pc, #84]	; (8000584 <HAL_InitTick+0x6c>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <HAL_InitTick+0x68>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000538:	fbb1 f3f3 	udiv	r3, r1, r3
 800053c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f93a 	bl	80007ba <HAL_SYSTICK_Config>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d10f      	bne.n	800056c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2b0f      	cmp	r3, #15
 8000550:	d809      	bhi.n	8000566 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000552:	2200      	movs	r2, #0
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	f04f 30ff 	mov.w	r0, #4294967295
 800055a:	f000 f912 	bl	8000782 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <HAL_InitTick+0x70>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	e007      	b.n	8000576 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	73fb      	strb	r3, [r7, #15]
 800056a:	e004      	b.n	8000576 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800056c:	2301      	movs	r3, #1
 800056e:	73fb      	strb	r3, [r7, #15]
 8000570:	e001      	b.n	8000576 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
}
 8000578:	4618      	mov	r0, r3
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000004 	.word	0x20000004
 8000584:	20000008 	.word	0x20000008
 8000588:	20000000 	.word	0x20000000

0800058c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <HAL_IncTick+0x1c>)
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <HAL_IncTick+0x20>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4413      	add	r3, r2
 800059a:	4a03      	ldr	r2, [pc, #12]	; (80005a8 <HAL_IncTick+0x1c>)
 800059c:	6013      	str	r3, [r2, #0]
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000028 	.word	0x20000028
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <HAL_GetTick+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d0:	f7ff ffee 	bl	80005b0 <HAL_GetTick>
 80005d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e0:	d004      	beq.n	80005ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <HAL_Delay+0x40>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ec:	bf00      	nop
 80005ee:	f7ff ffdf 	bl	80005b0 <HAL_GetTick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1ad2      	subs	r2, r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d3f7      	bcc.n	80005ee <HAL_Delay+0x26>
  {
  }
}
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000004 	.word	0x20000004

0800060c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f003 0307 	and.w	r3, r3, #7
 800061a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000622:	68ba      	ldr	r2, [r7, #8]
 8000624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000628:	4013      	ands	r3, r2
 800062a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063e:	4a04      	ldr	r2, [pc, #16]	; (8000650 <__NVIC_SetPriorityGrouping+0x44>)
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	60d3      	str	r3, [r2, #12]
}
 8000644:	bf00      	nop
 8000646:	3714      	adds	r7, #20
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <__NVIC_GetPriorityGrouping+0x18>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	f003 0307 	and.w	r3, r3, #7
}
 8000662:	4618      	mov	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db0a      	blt.n	800069a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000684:	490d      	ldr	r1, [pc, #52]	; (80006bc <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	683a      	ldr	r2, [r7, #0]
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	0112      	lsls	r2, r2, #4
 8000690:	b2d2      	uxtb	r2, r2
 8000692:	440b      	add	r3, r1
 8000694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000698:	e00a      	b.n	80006b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	4909      	ldr	r1, [pc, #36]	; (80006c0 <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	0112      	lsls	r2, r2, #4
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	440b      	add	r3, r1
 80006ae:	761a      	strb	r2, [r3, #24]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e100 	.word	0xe000e100
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b089      	sub	sp, #36	; 0x24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	f003 0307 	and.w	r3, r3, #7
 80006d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	f1c3 0307 	rsb	r3, r3, #7
 80006de:	2b04      	cmp	r3, #4
 80006e0:	bf28      	it	cs
 80006e2:	2304      	movcs	r3, #4
 80006e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	3304      	adds	r3, #4
 80006ea:	2b06      	cmp	r3, #6
 80006ec:	d902      	bls.n	80006f4 <NVIC_EncodePriority+0x30>
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3b03      	subs	r3, #3
 80006f2:	e000      	b.n	80006f6 <NVIC_EncodePriority+0x32>
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	2201      	movs	r2, #1
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	1e5a      	subs	r2, r3, #1
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	401a      	ands	r2, r3
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800070a:	2101      	movs	r1, #1
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	1e59      	subs	r1, r3, #1
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000738:	d301      	bcc.n	800073e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800073a:	2301      	movs	r3, #1
 800073c:	e00f      	b.n	800075e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <SysTick_Config+0x40>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3b01      	subs	r3, #1
 8000744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000746:	210f      	movs	r1, #15
 8000748:	f04f 30ff 	mov.w	r0, #4294967295
 800074c:	f7ff ff90 	bl	8000670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SysTick_Config+0x40>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SysTick_Config+0x40>)
 8000758:	2207      	movs	r2, #7
 800075a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff49 	bl	800060c <__NVIC_SetPriorityGrouping>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000782:	b580      	push	{r7, lr}
 8000784:	b086      	sub	sp, #24
 8000786:	af00      	add	r7, sp, #0
 8000788:	4603      	mov	r3, r0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000794:	f7ff ff5e 	bl	8000654 <__NVIC_GetPriorityGrouping>
 8000798:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff ff90 	bl	80006c4 <NVIC_EncodePriority>
 80007a4:	4602      	mov	r2, r0
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	4611      	mov	r1, r2
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff ff5f 	bl	8000670 <__NVIC_SetPriority>
}
 80007b2:	bf00      	nop
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ffb0 	bl	8000728 <SysTick_Config>
 80007c8:	4603      	mov	r3, r0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007e2:	e17f      	b.n	8000ae4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	2101      	movs	r1, #1
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	fa01 f303 	lsl.w	r3, r1, r3
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	f000 8171 	beq.w	8000ade <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d003      	beq.n	800080c <HAL_GPIO_Init+0x38>
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	2b12      	cmp	r3, #18
 800080a:	d123      	bne.n	8000854 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	08da      	lsrs	r2, r3, #3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3208      	adds	r2, #8
 8000814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000818:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	f003 0307 	and.w	r3, r3, #7
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	220f      	movs	r2, #15
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	43db      	mvns	r3, r3
 800082a:	693a      	ldr	r2, [r7, #16]
 800082c:	4013      	ands	r3, r2
 800082e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	691a      	ldr	r2, [r3, #16]
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	4313      	orrs	r3, r2
 8000844:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	08da      	lsrs	r2, r3, #3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	3208      	adds	r2, #8
 800084e:	6939      	ldr	r1, [r7, #16]
 8000850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	2203      	movs	r2, #3
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f003 0203 	and.w	r2, r3, #3
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d00b      	beq.n	80008a8 <HAL_GPIO_Init+0xd4>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	2b02      	cmp	r3, #2
 8000896:	d007      	beq.n	80008a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800089c:	2b11      	cmp	r3, #17
 800089e:	d003      	beq.n	80008a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b12      	cmp	r3, #18
 80008a6:	d130      	bne.n	800090a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	2203      	movs	r2, #3
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	68da      	ldr	r2, [r3, #12]
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008de:	2201      	movs	r2, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4013      	ands	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	091b      	lsrs	r3, r3, #4
 80008f4:	f003 0201 	and.w	r2, r3, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	4313      	orrs	r3, r2
 8000902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	2b03      	cmp	r3, #3
 8000914:	d118      	bne.n	8000948 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800091a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800091c:	2201      	movs	r2, #1
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4013      	ands	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	f003 0201 	and.w	r2, r3, #1
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4313      	orrs	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	2203      	movs	r2, #3
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4013      	ands	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	693a      	ldr	r2, [r7, #16]
 800096e:	4313      	orrs	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	693a      	ldr	r2, [r7, #16]
 8000976:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	2b00      	cmp	r3, #0
 8000982:	f000 80ac 	beq.w	8000ade <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4a5e      	ldr	r2, [pc, #376]	; (8000b00 <HAL_GPIO_Init+0x32c>)
 8000988:	4b5d      	ldr	r3, [pc, #372]	; (8000b00 <HAL_GPIO_Init+0x32c>)
 800098a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6613      	str	r3, [r2, #96]	; 0x60
 8000992:	4b5b      	ldr	r3, [pc, #364]	; (8000b00 <HAL_GPIO_Init+0x32c>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800099e:	4a59      	ldr	r2, [pc, #356]	; (8000b04 <HAL_GPIO_Init+0x330>)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	3302      	adds	r3, #2
 80009a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f003 0303 	and.w	r3, r3, #3
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	220f      	movs	r2, #15
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009c8:	d025      	beq.n	8000a16 <HAL_GPIO_Init+0x242>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <HAL_GPIO_Init+0x334>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d01f      	beq.n	8000a12 <HAL_GPIO_Init+0x23e>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a4d      	ldr	r2, [pc, #308]	; (8000b0c <HAL_GPIO_Init+0x338>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d019      	beq.n	8000a0e <HAL_GPIO_Init+0x23a>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <HAL_GPIO_Init+0x33c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d013      	beq.n	8000a0a <HAL_GPIO_Init+0x236>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a4b      	ldr	r2, [pc, #300]	; (8000b14 <HAL_GPIO_Init+0x340>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00d      	beq.n	8000a06 <HAL_GPIO_Init+0x232>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a4a      	ldr	r2, [pc, #296]	; (8000b18 <HAL_GPIO_Init+0x344>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0x22e>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a49      	ldr	r2, [pc, #292]	; (8000b1c <HAL_GPIO_Init+0x348>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d101      	bne.n	80009fe <HAL_GPIO_Init+0x22a>
 80009fa:	2306      	movs	r3, #6
 80009fc:	e00c      	b.n	8000a18 <HAL_GPIO_Init+0x244>
 80009fe:	2307      	movs	r3, #7
 8000a00:	e00a      	b.n	8000a18 <HAL_GPIO_Init+0x244>
 8000a02:	2305      	movs	r3, #5
 8000a04:	e008      	b.n	8000a18 <HAL_GPIO_Init+0x244>
 8000a06:	2304      	movs	r3, #4
 8000a08:	e006      	b.n	8000a18 <HAL_GPIO_Init+0x244>
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	e004      	b.n	8000a18 <HAL_GPIO_Init+0x244>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e002      	b.n	8000a18 <HAL_GPIO_Init+0x244>
 8000a12:	2301      	movs	r3, #1
 8000a14:	e000      	b.n	8000a18 <HAL_GPIO_Init+0x244>
 8000a16:	2300      	movs	r3, #0
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	f002 0203 	and.w	r2, r2, #3
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	4093      	lsls	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a28:	4936      	ldr	r1, [pc, #216]	; (8000b04 <HAL_GPIO_Init+0x330>)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	089b      	lsrs	r3, r3, #2
 8000a2e:	3302      	adds	r3, #2
 8000a30:	693a      	ldr	r2, [r7, #16]
 8000a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <HAL_GPIO_Init+0x34c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	43db      	mvns	r3, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4013      	ands	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000a5a:	4a31      	ldr	r2, [pc, #196]	; (8000b20 <HAL_GPIO_Init+0x34c>)
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000a60:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <HAL_GPIO_Init+0x34c>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	693a      	ldr	r2, [r7, #16]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a84:	4a26      	ldr	r2, [pc, #152]	; (8000b20 <HAL_GPIO_Init+0x34c>)
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <HAL_GPIO_Init+0x34c>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	43db      	mvns	r3, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4013      	ands	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d003      	beq.n	8000aae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aae:	4a1c      	ldr	r2, [pc, #112]	; (8000b20 <HAL_GPIO_Init+0x34c>)
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_GPIO_Init+0x34c>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d003      	beq.n	8000ad8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad8:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <HAL_GPIO_Init+0x34c>)
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	fa22 f303 	lsr.w	r3, r2, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	f47f ae78 	bne.w	80007e4 <HAL_GPIO_Init+0x10>
  }
}
 8000af4:	bf00      	nop
 8000af6:	371c      	adds	r7, #28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40010000 	.word	0x40010000
 8000b08:	48000400 	.word	0x48000400
 8000b0c:	48000800 	.word	0x48000800
 8000b10:	48000c00 	.word	0x48000c00
 8000b14:	48001000 	.word	0x48001000
 8000b18:	48001400 	.word	0x48001400
 8000b1c:	48001800 	.word	0x48001800
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b34:	787b      	ldrb	r3, [r7, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b40:	e002      	b.n	8000b48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b42:	887a      	ldrh	r2, [r7, #2]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	695a      	ldr	r2, [r3, #20]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	4013      	ands	r3, r2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b6c:	887a      	ldrh	r2, [r7, #2]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000b72:	e002      	b.n	8000b7a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b74:	887a      	ldrh	r2, [r7, #2]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	619a      	str	r2, [r3, #24]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40007000 	.word	0x40007000

08000ba4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bb2:	d130      	bne.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bb4:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bc0:	d038      	beq.n	8000c34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc2:	4a20      	ldr	r2, [pc, #128]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bd0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2232      	movs	r2, #50	; 0x32
 8000bd8:	fb02 f303 	mul.w	r3, r2, r3
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	0c9b      	lsrs	r3, r3, #18
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000be8:	e002      	b.n	8000bf0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	3b01      	subs	r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfc:	d102      	bne.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1f2      	bne.n	8000bea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c10:	d110      	bne.n	8000c34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c12:	2303      	movs	r3, #3
 8000c14:	e00f      	b.n	8000c36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c22:	d007      	beq.n	8000c34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c24:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3714      	adds	r7, #20
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40007000 	.word	0x40007000
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	431bde83 	.word	0x431bde83

08000c50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e3d4      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c62:	4ba1      	ldr	r3, [pc, #644]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	f003 030c 	and.w	r3, r3, #12
 8000c6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c6c:	4b9e      	ldr	r3, [pc, #632]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 80e4 	beq.w	8000e4c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d007      	beq.n	8000c9a <HAL_RCC_OscConfig+0x4a>
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	2b0c      	cmp	r3, #12
 8000c8e:	f040 808b 	bne.w	8000da8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	f040 8087 	bne.w	8000da8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c9a:	4b93      	ldr	r3, [pc, #588]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d005      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x62>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e3ac      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a1a      	ldr	r2, [r3, #32]
 8000cb6:	4b8c      	ldr	r3, [pc, #560]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d004      	beq.n	8000ccc <HAL_RCC_OscConfig+0x7c>
 8000cc2:	4b89      	ldr	r3, [pc, #548]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cca:	e005      	b.n	8000cd8 <HAL_RCC_OscConfig+0x88>
 8000ccc:	4b86      	ldr	r3, [pc, #536]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d923      	bls.n	8000d24 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 fd3f 	bl	8001764 <RCC_SetFlashLatencyFromMSIRange>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e38d      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cf0:	4a7d      	ldr	r2, [pc, #500]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000cf2:	4b7d      	ldr	r3, [pc, #500]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f043 0308 	orr.w	r3, r3, #8
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	497a      	ldr	r1, [pc, #488]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000cfe:	4b7a      	ldr	r3, [pc, #488]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d0e:	4976      	ldr	r1, [pc, #472]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d10:	4b75      	ldr	r3, [pc, #468]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	604b      	str	r3, [r1, #4]
 8000d22:	e025      	b.n	8000d70 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d24:	4a70      	ldr	r2, [pc, #448]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d26:	4b70      	ldr	r3, [pc, #448]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f043 0308 	orr.w	r3, r3, #8
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	496d      	ldr	r1, [pc, #436]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d32:	4b6d      	ldr	r3, [pc, #436]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d42:	4969      	ldr	r1, [pc, #420]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d44:	4b68      	ldr	r3, [pc, #416]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69db      	ldr	r3, [r3, #28]
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	4313      	orrs	r3, r2
 8000d54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fcff 	bl	8001764 <RCC_SetFlashLatencyFromMSIRange>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e34d      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d70:	f000 fc36 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 8000d74:	4601      	mov	r1, r0
 8000d76:	4b5c      	ldr	r3, [pc, #368]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	091b      	lsrs	r3, r3, #4
 8000d7c:	f003 030f 	and.w	r3, r3, #15
 8000d80:	4a5a      	ldr	r2, [pc, #360]	; (8000eec <HAL_RCC_OscConfig+0x29c>)
 8000d82:	5cd3      	ldrb	r3, [r2, r3]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	fa21 f303 	lsr.w	r3, r1, r3
 8000d8c:	4a58      	ldr	r2, [pc, #352]	; (8000ef0 <HAL_RCC_OscConfig+0x2a0>)
 8000d8e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000d90:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <HAL_RCC_OscConfig+0x2a4>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fbbf 	bl	8000518 <HAL_InitTick>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d052      	beq.n	8000e4a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	e331      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d032      	beq.n	8000e16 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000db0:	4a4d      	ldr	r2, [pc, #308]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000db2:	4b4d      	ldr	r3, [pc, #308]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f043 0301 	orr.w	r3, r3, #1
 8000dba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dbc:	f7ff fbf8 	bl	80005b0 <HAL_GetTick>
 8000dc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dc2:	e008      	b.n	8000dd6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dc4:	f7ff fbf4 	bl	80005b0 <HAL_GetTick>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e31a      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dd6:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f0      	beq.n	8000dc4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000de2:	4a41      	ldr	r2, [pc, #260]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000de4:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6013      	str	r3, [r2, #0]
 8000dee:	493e      	ldr	r1, [pc, #248]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000df0:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6a1b      	ldr	r3, [r3, #32]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e00:	4939      	ldr	r1, [pc, #228]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	021b      	lsls	r3, r3, #8
 8000e10:	4313      	orrs	r3, r2
 8000e12:	604b      	str	r3, [r1, #4]
 8000e14:	e01a      	b.n	8000e4c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e16:	4a34      	ldr	r2, [pc, #208]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000e18:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e22:	f7ff fbc5 	bl	80005b0 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e2a:	f7ff fbc1 	bl	80005b0 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e2e7      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1f0      	bne.n	8000e2a <HAL_RCC_OscConfig+0x1da>
 8000e48:	e000      	b.n	8000e4c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e4a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d074      	beq.n	8000f42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2b08      	cmp	r3, #8
 8000e5c:	d005      	beq.n	8000e6a <HAL_RCC_OscConfig+0x21a>
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2b0c      	cmp	r3, #12
 8000e62:	d10e      	bne.n	8000e82 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d10b      	bne.n	8000e82 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d064      	beq.n	8000f40 <HAL_RCC_OscConfig+0x2f0>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d160      	bne.n	8000f40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e2c4      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e8a:	d106      	bne.n	8000e9a <HAL_RCC_OscConfig+0x24a>
 8000e8c:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000e8e:	4b16      	ldr	r3, [pc, #88]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e01d      	b.n	8000ed6 <HAL_RCC_OscConfig+0x286>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea2:	d10c      	bne.n	8000ebe <HAL_RCC_OscConfig+0x26e>
 8000ea4:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eba:	6013      	str	r3, [r2, #0]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_RCC_OscConfig+0x286>
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_RCC_OscConfig+0x298>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d01c      	beq.n	8000f18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ede:	f7ff fb67 	bl	80005b0 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ee4:	e011      	b.n	8000f0a <HAL_RCC_OscConfig+0x2ba>
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	08003090 	.word	0x08003090
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef8:	f7ff fb5a 	bl	80005b0 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b64      	cmp	r3, #100	; 0x64
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e280      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f0a:	4baf      	ldr	r3, [pc, #700]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x2a8>
 8000f16:	e014      	b.n	8000f42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f7ff fb4a 	bl	80005b0 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fb46 	bl	80005b0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e26c      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f32:	4ba5      	ldr	r3, [pc, #660]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f0      	bne.n	8000f20 <HAL_RCC_OscConfig+0x2d0>
 8000f3e:	e000      	b.n	8000f42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d060      	beq.n	8001010 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d005      	beq.n	8000f60 <HAL_RCC_OscConfig+0x310>
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b0c      	cmp	r3, #12
 8000f58:	d119      	bne.n	8000f8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d116      	bne.n	8000f8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f60:	4b99      	ldr	r3, [pc, #612]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <HAL_RCC_OscConfig+0x328>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d101      	bne.n	8000f78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e249      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4993      	ldr	r1, [pc, #588]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000f7a:	4b93      	ldr	r3, [pc, #588]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	061b      	lsls	r3, r3, #24
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f8c:	e040      	b.n	8001010 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d023      	beq.n	8000fde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f96:	4a8c      	ldr	r2, [pc, #560]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000f98:	4b8b      	ldr	r3, [pc, #556]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fb05 	bl	80005b0 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000faa:	f7ff fb01 	bl	80005b0 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e227      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fbc:	4b82      	ldr	r3, [pc, #520]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc8:	497f      	ldr	r1, [pc, #508]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000fca:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	061b      	lsls	r3, r3, #24
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	604b      	str	r3, [r1, #4]
 8000fdc:	e018      	b.n	8001010 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fde:	4a7a      	ldr	r2, [pc, #488]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000fe0:	4b79      	ldr	r3, [pc, #484]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fae1 	bl	80005b0 <HAL_GetTick>
 8000fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fadd 	bl	80005b0 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e203      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001004:	4b70      	ldr	r3, [pc, #448]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f0      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0308 	and.w	r3, r3, #8
 8001018:	2b00      	cmp	r3, #0
 800101a:	d03c      	beq.n	8001096 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d01c      	beq.n	800105e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001024:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001026:	4b68      	ldr	r3, [pc, #416]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001028:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001034:	f7ff fabc 	bl	80005b0 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fab8 	bl	80005b0 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1de      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800104e:	4b5e      	ldr	r3, [pc, #376]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0ef      	beq.n	800103c <HAL_RCC_OscConfig+0x3ec>
 800105c:	e01b      	b.n	8001096 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105e:	4a5a      	ldr	r2, [pc, #360]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001060:	4b59      	ldr	r3, [pc, #356]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001066:	f023 0301 	bic.w	r3, r3, #1
 800106a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106e:	f7ff fa9f 	bl	80005b0 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001076:	f7ff fa9b 	bl	80005b0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e1c1      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 800108a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1ef      	bne.n	8001076 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 80a6 	beq.w	80011f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80010a8:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 80010aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10d      	bne.n	80010d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b4:	4a44      	ldr	r2, [pc, #272]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 80010b6:	4b44      	ldr	r3, [pc, #272]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 80010b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010be:	6593      	str	r3, [r2, #88]	; 0x58
 80010c0:	4b41      	ldr	r3, [pc, #260]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010cc:	2301      	movs	r3, #1
 80010ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010d0:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <HAL_RCC_OscConfig+0x57c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d118      	bne.n	800110e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010dc:	4a3b      	ldr	r2, [pc, #236]	; (80011cc <HAL_RCC_OscConfig+0x57c>)
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_RCC_OscConfig+0x57c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010e8:	f7ff fa62 	bl	80005b0 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f0:	f7ff fa5e 	bl	80005b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e184      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <HAL_RCC_OscConfig+0x57c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110a:	2b00      	cmp	r3, #0
 800110c:	d0f0      	beq.n	80010f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d108      	bne.n	8001128 <HAL_RCC_OscConfig+0x4d8>
 8001116:	4a2c      	ldr	r2, [pc, #176]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 800111a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001126:	e024      	b.n	8001172 <HAL_RCC_OscConfig+0x522>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b05      	cmp	r3, #5
 800112e:	d110      	bne.n	8001152 <HAL_RCC_OscConfig+0x502>
 8001130:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001132:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001150:	e00f      	b.n	8001172 <HAL_RCC_OscConfig+0x522>
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800115a:	f023 0301 	bic.w	r3, r3, #1
 800115e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001162:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 8001166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116a:	f023 0304 	bic.w	r3, r3, #4
 800116e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d016      	beq.n	80011a8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800117a:	f7ff fa19 	bl	80005b0 <HAL_GetTick>
 800117e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001180:	e00a      	b.n	8001198 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001182:	f7ff fa15 	bl	80005b0 <HAL_GetTick>
 8001186:	4602      	mov	r2, r0
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001190:	4293      	cmp	r3, r2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e139      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <HAL_RCC_OscConfig+0x578>)
 800119a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0ed      	beq.n	8001182 <HAL_RCC_OscConfig+0x532>
 80011a6:	e01a      	b.n	80011de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011a8:	f7ff fa02 	bl	80005b0 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011ae:	e00f      	b.n	80011d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b0:	f7ff f9fe 	bl	80005b0 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80011be:	4293      	cmp	r3, r2
 80011c0:	d906      	bls.n	80011d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e122      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011d0:	4b90      	ldr	r3, [pc, #576]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1e8      	bne.n	80011b0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011de:	7ffb      	ldrb	r3, [r7, #31]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e4:	4a8b      	ldr	r2, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80011e6:	4b8b      	ldr	r3, [pc, #556]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	f000 8108 	beq.w	800140a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	2b02      	cmp	r3, #2
 8001200:	f040 80d0 	bne.w	80013a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001204:	4b83      	ldr	r3, [pc, #524]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	f003 0203 	and.w	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	429a      	cmp	r2, r3
 8001216:	d130      	bne.n	800127a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	3b01      	subs	r3, #1
 8001224:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	429a      	cmp	r2, r3
 8001228:	d127      	bne.n	800127a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001234:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001236:	429a      	cmp	r2, r3
 8001238:	d11f      	bne.n	800127a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001244:	2a07      	cmp	r2, #7
 8001246:	bf14      	ite	ne
 8001248:	2201      	movne	r2, #1
 800124a:	2200      	moveq	r2, #0
 800124c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800124e:	4293      	cmp	r3, r2
 8001250:	d113      	bne.n	800127a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800125c:	085b      	lsrs	r3, r3, #1
 800125e:	3b01      	subs	r3, #1
 8001260:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001262:	429a      	cmp	r2, r3
 8001264:	d109      	bne.n	800127a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	085b      	lsrs	r3, r3, #1
 8001272:	3b01      	subs	r3, #1
 8001274:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001276:	429a      	cmp	r2, r3
 8001278:	d06e      	beq.n	8001358 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b0c      	cmp	r3, #12
 800127e:	d069      	beq.n	8001354 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001280:	4b64      	ldr	r3, [pc, #400]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0b7      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800129c:	4a5d      	ldr	r2, [pc, #372]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 800129e:	4b5d      	ldr	r3, [pc, #372]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80012a8:	f7ff f982 	bl	80005b0 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b0:	f7ff f97e 	bl	80005b0 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e0a4      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012c2:	4b54      	ldr	r3, [pc, #336]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ce:	4851      	ldr	r0, [pc, #324]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80012d0:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80012d2:	68da      	ldr	r2, [r3, #12]
 80012d4:	4b50      	ldr	r3, [pc, #320]	; (8001418 <HAL_RCC_OscConfig+0x7c8>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012e0:	3a01      	subs	r2, #1
 80012e2:	0112      	lsls	r2, r2, #4
 80012e4:	4311      	orrs	r1, r2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012ea:	0212      	lsls	r2, r2, #8
 80012ec:	4311      	orrs	r1, r2
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80012f2:	0852      	lsrs	r2, r2, #1
 80012f4:	3a01      	subs	r2, #1
 80012f6:	0552      	lsls	r2, r2, #21
 80012f8:	4311      	orrs	r1, r2
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012fe:	0852      	lsrs	r2, r2, #1
 8001300:	3a01      	subs	r2, #1
 8001302:	0652      	lsls	r2, r2, #25
 8001304:	4311      	orrs	r1, r2
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800130a:	0912      	lsrs	r2, r2, #4
 800130c:	0452      	lsls	r2, r2, #17
 800130e:	430a      	orrs	r2, r1
 8001310:	4313      	orrs	r3, r2
 8001312:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001314:	4a3f      	ldr	r2, [pc, #252]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800131e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001320:	4a3c      	ldr	r2, [pc, #240]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001322:	4b3c      	ldr	r3, [pc, #240]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800132a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800132c:	f7ff f940 	bl	80005b0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001334:	f7ff f93c 	bl	80005b0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e062      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001346:	4b33      	ldr	r3, [pc, #204]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001352:	e05a      	b.n	800140a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e059      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001358:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d152      	bne.n	800140a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001364:	4a2b      	ldr	r2, [pc, #172]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800136e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001370:	4a28      	ldr	r2, [pc, #160]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800137a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800137c:	f7ff f918 	bl	80005b0 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff f914 	bl	80005b0 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e03a      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0x734>
 80013a2:	e032      	b.n	800140a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d02d      	beq.n	8001406 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013b4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80013c4:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	f023 0303 	bic.w	r3, r3, #3
 80013cc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80013d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013dc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013de:	f7ff f8e7 	bl	80005b0 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e6:	f7ff f8e3 	bl	80005b0 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e009      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_RCC_OscConfig+0x7c4>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x796>
 8001404:	e001      	b.n	800140a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	f99d808c 	.word	0xf99d808c

0800141c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0c8      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b66      	ldr	r3, [pc, #408]	; (80015cc <HAL_RCC_ClockConfig+0x1b0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0207 	and.w	r2, r3, #7
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d210      	bcs.n	8001460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4963      	ldr	r1, [pc, #396]	; (80015cc <HAL_RCC_ClockConfig+0x1b0>)
 8001440:	4b62      	ldr	r3, [pc, #392]	; (80015cc <HAL_RCC_ClockConfig+0x1b0>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 0207 	bic.w	r2, r3, #7
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800144e:	4b5f      	ldr	r3, [pc, #380]	; (80015cc <HAL_RCC_ClockConfig+0x1b0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0207 	and.w	r2, r3, #7
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d001      	beq.n	8001460 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e0b0      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	2b00      	cmp	r3, #0
 800146a:	d04c      	beq.n	8001506 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b03      	cmp	r3, #3
 8001472:	d107      	bne.n	8001484 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001474:	4b56      	ldr	r3, [pc, #344]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d121      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e09e      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d107      	bne.n	800149c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d115      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e092      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014a4:	4b4a      	ldr	r3, [pc, #296]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e086      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d101      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e07e      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014c4:	4942      	ldr	r1, [pc, #264]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f023 0203 	bic.w	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014d6:	f7ff f86b 	bl	80005b0 <HAL_GetTick>
 80014da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014de:	f7ff f867 	bl	80005b0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e066      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 020c 	and.w	r2, r3, #12
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	429a      	cmp	r2, r3
 8001504:	d1eb      	bne.n	80014de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001512:	492f      	ldr	r1, [pc, #188]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001514:	4b2e      	ldr	r3, [pc, #184]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	4313      	orrs	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001524:	4b29      	ldr	r3, [pc, #164]	; (80015cc <HAL_RCC_ClockConfig+0x1b0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0207 	and.w	r2, r3, #7
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	429a      	cmp	r2, r3
 8001530:	d910      	bls.n	8001554 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	4926      	ldr	r1, [pc, #152]	; (80015cc <HAL_RCC_ClockConfig+0x1b0>)
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <HAL_RCC_ClockConfig+0x1b0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 0207 	bic.w	r2, r3, #7
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_RCC_ClockConfig+0x1b0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0207 	and.w	r2, r3, #7
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d001      	beq.n	8001554 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	e036      	b.n	80015c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001560:	491b      	ldr	r1, [pc, #108]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800157e:	4914      	ldr	r1, [pc, #80]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001592:	f000 f825 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 8001596:	4601      	mov	r1, r0
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_RCC_ClockConfig+0x1b4>)
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	091b      	lsrs	r3, r3, #4
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	5cd3      	ldrb	r3, [r2, r3]
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	fa21 f303 	lsr.w	r3, r1, r3
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ffae 	bl	8000518 <HAL_InitTick>
 80015bc:	4603      	mov	r3, r0
 80015be:	72fb      	strb	r3, [r7, #11]

  return status;
 80015c0:	7afb      	ldrb	r3, [r7, #11]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40022000 	.word	0x40022000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08003090 	.word	0x08003090
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000000 	.word	0x20000000

080015e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ee:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f8:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_GetSysClockFreq+0x34>
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	2b0c      	cmp	r3, #12
 800160c:	d121      	bne.n	8001652 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d11e      	bne.n	8001652 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	61fb      	str	r3, [r7, #28]
 800162e:	e005      	b.n	800163c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	091b      	lsrs	r3, r3, #4
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800163c:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001644:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10d      	bne.n	8001668 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2b04      	cmp	r3, #4
 8001656:	d102      	bne.n	800165e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800165a:	61bb      	str	r3, [r7, #24]
 800165c:	e004      	b.n	8001668 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	2b08      	cmp	r3, #8
 8001662:	d101      	bne.n	8001668 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001666:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	2b0c      	cmp	r3, #12
 800166c:	d133      	bne.n	80016d6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b02      	cmp	r3, #2
 800167c:	d002      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0xa4>
 800167e:	2b03      	cmp	r3, #3
 8001680:	d003      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0xaa>
 8001682:	e005      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_RCC_GetSysClockFreq+0x10c>)
 8001686:	617b      	str	r3, [r7, #20]
      break;
 8001688:	e005      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800168a:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800168c:	617b      	str	r3, [r7, #20]
      break;
 800168e:	e002      	b.n	8001696 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	617b      	str	r3, [r7, #20]
      break;
 8001694:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	3301      	adds	r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	fb02 f203 	mul.w	r2, r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ba:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_RCC_GetSysClockFreq+0x104>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	0e5b      	lsrs	r3, r3, #25
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	3301      	adds	r3, #1
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80016d6:	69bb      	ldr	r3, [r7, #24]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3724      	adds	r7, #36	; 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40021000 	.word	0x40021000
 80016e8:	080030a8 	.word	0x080030a8
 80016ec:	00f42400 	.word	0x00f42400
 80016f0:	007a1200 	.word	0x007a1200

080016f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f8:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_RCC_GetHCLKFreq+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000008 	.word	0x20000008

0800170c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001710:	f7ff fff0 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 8001714:	4601      	mov	r1, r0
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	fa21 f303 	lsr.w	r3, r1, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	080030a0 	.word	0x080030a0

08001738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800173c:	f7ff ffda 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 8001740:	4601      	mov	r1, r0
 8001742:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	0adb      	lsrs	r3, r3, #11
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	080030a0 	.word	0x080030a0

08001764 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800177c:	f7ff fa04 	bl	8000b88 <HAL_PWREx_GetVoltageRange>
 8001780:	6178      	str	r0, [r7, #20]
 8001782:	e014      	b.n	80017ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	4a25      	ldr	r2, [pc, #148]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001786:	4b25      	ldr	r3, [pc, #148]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178e:	6593      	str	r3, [r2, #88]	; 0x58
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800179c:	f7ff f9f4 	bl	8000b88 <HAL_PWREx_GetVoltageRange>
 80017a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80017a2:	4a1e      	ldr	r2, [pc, #120]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017b4:	d10b      	bne.n	80017ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b80      	cmp	r3, #128	; 0x80
 80017ba:	d919      	bls.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2ba0      	cmp	r3, #160	; 0xa0
 80017c0:	d902      	bls.n	80017c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017c2:	2302      	movs	r3, #2
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	e013      	b.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017c8:	2301      	movs	r3, #1
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	e010      	b.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b80      	cmp	r3, #128	; 0x80
 80017d2:	d902      	bls.n	80017da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80017d4:	2303      	movs	r3, #3
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	e00a      	b.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b80      	cmp	r3, #128	; 0x80
 80017de:	d102      	bne.n	80017e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80017e0:	2302      	movs	r3, #2
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	e004      	b.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b70      	cmp	r3, #112	; 0x70
 80017ea:	d101      	bne.n	80017f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80017ec:	2301      	movs	r3, #1
 80017ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017f0:	490b      	ldr	r1, [pc, #44]	; (8001820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 0207 	bic.w	r2, r3, #7
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001800:	4b07      	ldr	r3, [pc, #28]	; (8001820 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0207 	and.w	r2, r3, #7
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	429a      	cmp	r2, r3
 800180c:	d001      	beq.n	8001812 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	40022000 	.word	0x40022000

08001824 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800182c:	2300      	movs	r3, #0
 800182e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001830:	2300      	movs	r3, #0
 8001832:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03f      	beq.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001848:	d01c      	beq.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800184a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800184e:	d802      	bhi.n	8001856 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00e      	beq.n	8001872 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001854:	e01f      	b.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001856:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800185a:	d003      	beq.n	8001864 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800185c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001860:	d01c      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001862:	e018      	b.n	8001896 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001864:	4a85      	ldr	r2, [pc, #532]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001866:	4b85      	ldr	r3, [pc, #532]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001870:	e015      	b.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fab9 	bl	8001df0 <RCCEx_PLLSAI1_Config>
 800187e:	4603      	mov	r3, r0
 8001880:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001882:	e00c      	b.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3320      	adds	r3, #32
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fba0 	bl	8001fd0 <RCCEx_PLLSAI2_Config>
 8001890:	4603      	mov	r3, r0
 8001892:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001894:	e003      	b.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	74fb      	strb	r3, [r7, #19]
      break;
 800189a:	e000      	b.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800189c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800189e:	7cfb      	ldrb	r3, [r7, #19]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10b      	bne.n	80018bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80018a4:	4975      	ldr	r1, [pc, #468]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018a6:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018b4:	4313      	orrs	r3, r2
 80018b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80018ba:	e001      	b.n	80018c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80018bc:	7cfb      	ldrb	r3, [r7, #19]
 80018be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d03f      	beq.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d4:	d01c      	beq.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80018d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018da:	d802      	bhi.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00e      	beq.n	80018fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80018e0:	e01f      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80018e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018e6:	d003      	beq.n	80018f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80018e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80018ec:	d01c      	beq.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80018ee:	e018      	b.n	8001922 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80018f0:	4a62      	ldr	r2, [pc, #392]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018f2:	4b62      	ldr	r3, [pc, #392]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80018fc:	e015      	b.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	3304      	adds	r3, #4
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fa73 	bl	8001df0 <RCCEx_PLLSAI1_Config>
 800190a:	4603      	mov	r3, r0
 800190c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800190e:	e00c      	b.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3320      	adds	r3, #32
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f000 fb5a 	bl	8001fd0 <RCCEx_PLLSAI2_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001920:	e003      	b.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	74fb      	strb	r3, [r7, #19]
      break;
 8001926:	e000      	b.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800192a:	7cfb      	ldrb	r3, [r7, #19]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10b      	bne.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001930:	4952      	ldr	r1, [pc, #328]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001932:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001938:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001940:	4313      	orrs	r3, r2
 8001942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001946:	e001      	b.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001948:	7cfb      	ldrb	r3, [r7, #19]
 800194a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a0 	beq.w	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800196e:	2300      	movs	r3, #0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00d      	beq.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001974:	4a41      	ldr	r2, [pc, #260]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001976:	4b41      	ldr	r3, [pc, #260]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197e:	6593      	str	r3, [r2, #88]	; 0x58
 8001980:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800198c:	2301      	movs	r3, #1
 800198e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001990:	4a3b      	ldr	r2, [pc, #236]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800199c:	f7fe fe08 	bl	80005b0 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019a2:	e009      	b.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a4:	f7fe fe04 	bl	80005b0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d902      	bls.n	80019b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	74fb      	strb	r3, [r7, #19]
        break;
 80019b6:	e005      	b.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80019b8:	4b31      	ldr	r3, [pc, #196]	; (8001a80 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ef      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80019c4:	7cfb      	ldrb	r3, [r7, #19]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d15c      	bne.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01f      	beq.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d019      	beq.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80019f4:	4a21      	ldr	r2, [pc, #132]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019f6:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001a04:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a26:	f7fe fdc3 	bl	80005b0 <HAL_GetTick>
 8001a2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7fe fdbf 	bl	80005b0 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d902      	bls.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	74fb      	strb	r3, [r7, #19]
            break;
 8001a44:	e006      	b.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a46:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0ec      	beq.n	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001a54:	7cfb      	ldrb	r3, [r7, #19]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a5a:	4908      	ldr	r1, [pc, #32]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001a72:	e009      	b.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001a74:	7cfb      	ldrb	r3, [r7, #19]
 8001a76:	74bb      	strb	r3, [r7, #18]
 8001a78:	e006      	b.n	8001a88 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a84:	7cfb      	ldrb	r3, [r7, #19]
 8001a86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a88:	7c7b      	ldrb	r3, [r7, #17]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d105      	bne.n	8001a9a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8e:	4a9e      	ldr	r2, [pc, #632]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a90:	4b9d      	ldr	r3, [pc, #628]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001aa6:	4998      	ldr	r1, [pc, #608]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aa8:	4b97      	ldr	r3, [pc, #604]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	f023 0203 	bic.w	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ac8:	498f      	ldr	r1, [pc, #572]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aca:	4b8f      	ldr	r3, [pc, #572]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad0:	f023 020c 	bic.w	r2, r3, #12
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001aea:	4987      	ldr	r1, [pc, #540]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aec:	4b86      	ldr	r3, [pc, #536]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001af2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4313      	orrs	r3, r2
 8001afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00a      	beq.n	8001b22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001b0c:	497e      	ldr	r1, [pc, #504]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b0e:	4b7e      	ldr	r3, [pc, #504]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00a      	beq.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001b2e:	4976      	ldr	r1, [pc, #472]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b30:	4b75      	ldr	r3, [pc, #468]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b50:	496d      	ldr	r1, [pc, #436]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b52:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b60:	4313      	orrs	r3, r2
 8001b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00a      	beq.n	8001b88 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001b72:	4965      	ldr	r1, [pc, #404]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b74:	4b64      	ldr	r3, [pc, #400]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00a      	beq.n	8001baa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001b94:	495c      	ldr	r1, [pc, #368]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b96:	4b5c      	ldr	r3, [pc, #368]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bb6:	4954      	ldr	r1, [pc, #336]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bb8:	4b53      	ldr	r3, [pc, #332]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00a      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bd8:	494b      	ldr	r1, [pc, #300]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bda:	4b4b      	ldr	r3, [pc, #300]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	4313      	orrs	r3, r2
 8001bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001bfa:	4943      	ldr	r1, [pc, #268]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bfc:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d028      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c1c:	493a      	ldr	r1, [pc, #232]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c3c:	4a32      	ldr	r2, [pc, #200]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c3e:	4b32      	ldr	r3, [pc, #200]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c46:	60d3      	str	r3, [r2, #12]
 8001c48:	e011      	b.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c4e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3304      	adds	r3, #4
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 f8c8 	bl	8001df0 <RCCEx_PLLSAI1_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001c64:	7cfb      	ldrb	r3, [r7, #19]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001c6a:	7cfb      	ldrb	r3, [r7, #19]
 8001c6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d028      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001c7a:	4923      	ldr	r1, [pc, #140]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c98:	d106      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001c9a:	4a1b      	ldr	r2, [pc, #108]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ca4:	60d3      	str	r3, [r2, #12]
 8001ca6:	e011      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f899 	bl	8001df0 <RCCEx_PLLSAI1_Config>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001cc2:	7cfb      	ldrb	r3, [r7, #19]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001cc8:	7cfb      	ldrb	r3, [r7, #19]
 8001cca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d02b      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001cd8:	490b      	ldr	r1, [pc, #44]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cf6:	d109      	bne.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001cf8:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cfa:	4b03      	ldr	r3, [pc, #12]	; (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d02:	60d3      	str	r3, [r2, #12]
 8001d04:	e014      	b.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3304      	adds	r3, #4
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f867 	bl	8001df0 <RCCEx_PLLSAI1_Config>
 8001d22:	4603      	mov	r3, r0
 8001d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d26:	7cfb      	ldrb	r3, [r7, #19]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001d2c:	7cfb      	ldrb	r3, [r7, #19]
 8001d2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d02f      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d3c:	492b      	ldr	r1, [pc, #172]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d5a:	d10d      	bne.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	2102      	movs	r1, #2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f844 	bl	8001df0 <RCCEx_PLLSAI1_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d014      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001d72:	7cfb      	ldrb	r3, [r7, #19]
 8001d74:	74bb      	strb	r3, [r7, #18]
 8001d76:	e011      	b.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3320      	adds	r3, #32
 8001d86:	2102      	movs	r1, #2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f921 	bl	8001fd0 <RCCEx_PLLSAI2_Config>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001d92:	7cfb      	ldrb	r3, [r7, #19]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001d98:	7cfb      	ldrb	r3, [r7, #19]
 8001d9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00a      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001da8:	4910      	ldr	r1, [pc, #64]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001db8:	4313      	orrs	r3, r2
 8001dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001dca:	4908      	ldr	r1, [pc, #32]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001de2:	7cbb      	ldrb	r3, [r7, #18]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000

08001df0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001dfe:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d018      	beq.n	8001e3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e0a:	4b70      	ldr	r3, [pc, #448]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 0203 	and.w	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d10d      	bne.n	8001e36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
       ||
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001e22:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
       ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d044      	beq.n	8001ec0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
 8001e3a:	e041      	b.n	8001ec0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d00c      	beq.n	8001e5e <RCCEx_PLLSAI1_Config+0x6e>
 8001e44:	2b03      	cmp	r3, #3
 8001e46:	d013      	beq.n	8001e70 <RCCEx_PLLSAI1_Config+0x80>
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d120      	bne.n	8001e8e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e4c:	4b5f      	ldr	r3, [pc, #380]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d11d      	bne.n	8001e94 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e5c:	e01a      	b.n	8001e94 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d116      	bne.n	8001e98 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e6e:	e013      	b.n	8001e98 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e70:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10f      	bne.n	8001e9c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e7c:	4b53      	ldr	r3, [pc, #332]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001e8c:	e006      	b.n	8001e9c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	73fb      	strb	r3, [r7, #15]
      break;
 8001e92:	e004      	b.n	8001e9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e94:	bf00      	nop
 8001e96:	e002      	b.n	8001e9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e98:	bf00      	nop
 8001e9a:	e000      	b.n	8001e9e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001e9c:	bf00      	nop
    }

    if(status == HAL_OK)
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001ea4:	4849      	ldr	r0, [pc, #292]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ea6:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6819      	ldr	r1, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d17d      	bne.n	8001fc2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001ec6:	4a41      	ldr	r2, [pc, #260]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ec8:	4b40      	ldr	r3, [pc, #256]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed2:	f7fe fb6d 	bl	80005b0 <HAL_GetTick>
 8001ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001ed8:	e009      	b.n	8001eee <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001eda:	f7fe fb69 	bl	80005b0 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d902      	bls.n	8001eee <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	73fb      	strb	r3, [r7, #15]
        break;
 8001eec:	e005      	b.n	8001efa <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001eee:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d160      	bne.n	8001fc2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d111      	bne.n	8001f2a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f06:	4831      	ldr	r0, [pc, #196]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f08:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8001f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6892      	ldr	r2, [r2, #8]
 8001f18:	0211      	lsls	r1, r2, #8
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68d2      	ldr	r2, [r2, #12]
 8001f1e:	0912      	lsrs	r2, r2, #4
 8001f20:	0452      	lsls	r2, r2, #17
 8001f22:	430a      	orrs	r2, r1
 8001f24:	4313      	orrs	r3, r2
 8001f26:	6103      	str	r3, [r0, #16]
 8001f28:	e027      	b.n	8001f7a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d112      	bne.n	8001f56 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f30:	4826      	ldr	r0, [pc, #152]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001f3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6892      	ldr	r2, [r2, #8]
 8001f42:	0211      	lsls	r1, r2, #8
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6912      	ldr	r2, [r2, #16]
 8001f48:	0852      	lsrs	r2, r2, #1
 8001f4a:	3a01      	subs	r2, #1
 8001f4c:	0552      	lsls	r2, r2, #21
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	4313      	orrs	r3, r2
 8001f52:	6103      	str	r3, [r0, #16]
 8001f54:	e011      	b.n	8001f7a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f56:	481d      	ldr	r0, [pc, #116]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001f60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6892      	ldr	r2, [r2, #8]
 8001f68:	0211      	lsls	r1, r2, #8
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6952      	ldr	r2, [r2, #20]
 8001f6e:	0852      	lsrs	r2, r2, #1
 8001f70:	3a01      	subs	r2, #1
 8001f72:	0652      	lsls	r2, r2, #25
 8001f74:	430a      	orrs	r2, r1
 8001f76:	4313      	orrs	r3, r2
 8001f78:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001f7a:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7fe fb13 	bl	80005b0 <HAL_GetTick>
 8001f8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001f8c:	e009      	b.n	8001fa2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f8e:	f7fe fb0f 	bl	80005b0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d902      	bls.n	8001fa2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	73fb      	strb	r3, [r7, #15]
          break;
 8001fa0:	e005      	b.n	8001fae <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0ef      	beq.n	8001f8e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d106      	bne.n	8001fc2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001fb4:	4905      	ldr	r1, [pc, #20]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fb6:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001fde:	4b68      	ldr	r3, [pc, #416]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d018      	beq.n	800201c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001fea:	4b65      	ldr	r3, [pc, #404]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	f003 0203 	and.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d10d      	bne.n	8002016 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
       ||
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002002:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	091b      	lsrs	r3, r3, #4
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
       ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d044      	beq.n	80020a0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	e041      	b.n	80020a0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d00c      	beq.n	800203e <RCCEx_PLLSAI2_Config+0x6e>
 8002024:	2b03      	cmp	r3, #3
 8002026:	d013      	beq.n	8002050 <RCCEx_PLLSAI2_Config+0x80>
 8002028:	2b01      	cmp	r3, #1
 800202a:	d120      	bne.n	800206e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800202c:	4b54      	ldr	r3, [pc, #336]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d11d      	bne.n	8002074 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800203c:	e01a      	b.n	8002074 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800203e:	4b50      	ldr	r3, [pc, #320]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d116      	bne.n	8002078 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204e:	e013      	b.n	8002078 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10f      	bne.n	800207c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800205c:	4b48      	ldr	r3, [pc, #288]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800206c:	e006      	b.n	800207c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
      break;
 8002072:	e004      	b.n	800207e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002074:	bf00      	nop
 8002076:	e002      	b.n	800207e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002078:	bf00      	nop
 800207a:	e000      	b.n	800207e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800207c:	bf00      	nop
    }

    if(status == HAL_OK)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002084:	483e      	ldr	r0, [pc, #248]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6819      	ldr	r1, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	430b      	orrs	r3, r1
 800209c:	4313      	orrs	r3, r2
 800209e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d167      	bne.n	8002176 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80020a6:	4a36      	ldr	r2, [pc, #216]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020a8:	4b35      	ldr	r3, [pc, #212]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b2:	f7fe fa7d 	bl	80005b0 <HAL_GetTick>
 80020b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80020b8:	e009      	b.n	80020ce <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80020ba:	f7fe fa79 	bl	80005b0 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d902      	bls.n	80020ce <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	73fb      	strb	r3, [r7, #15]
        break;
 80020cc:	e005      	b.n	80020da <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80020ce:	4b2c      	ldr	r3, [pc, #176]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ef      	bne.n	80020ba <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d14a      	bne.n	8002176 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d111      	bne.n	800210a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80020e6:	4826      	ldr	r0, [pc, #152]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80020f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6892      	ldr	r2, [r2, #8]
 80020f8:	0211      	lsls	r1, r2, #8
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68d2      	ldr	r2, [r2, #12]
 80020fe:	0912      	lsrs	r2, r2, #4
 8002100:	0452      	lsls	r2, r2, #17
 8002102:	430a      	orrs	r2, r1
 8002104:	4313      	orrs	r3, r2
 8002106:	6143      	str	r3, [r0, #20]
 8002108:	e011      	b.n	800212e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800210a:	481d      	ldr	r0, [pc, #116]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002114:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6892      	ldr	r2, [r2, #8]
 800211c:	0211      	lsls	r1, r2, #8
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6912      	ldr	r2, [r2, #16]
 8002122:	0852      	lsrs	r2, r2, #1
 8002124:	3a01      	subs	r2, #1
 8002126:	0652      	lsls	r2, r2, #25
 8002128:	430a      	orrs	r2, r1
 800212a:	4313      	orrs	r3, r2
 800212c:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002138:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213a:	f7fe fa39 	bl	80005b0 <HAL_GetTick>
 800213e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002140:	e009      	b.n	8002156 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002142:	f7fe fa35 	bl	80005b0 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d902      	bls.n	8002156 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	73fb      	strb	r3, [r7, #15]
          break;
 8002154:	e005      	b.n	8002162 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ef      	beq.n	8002142 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d106      	bne.n	8002176 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002168:	4905      	ldr	r1, [pc, #20]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <RCCEx_PLLSAI2_Config+0x1b0>)
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	4313      	orrs	r3, r2
 8002174:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3710      	adds	r7, #16
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e040      	b.n	8002218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fece 	bl	8002f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f82c 	bl	8002220 <UART_SetConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e022      	b.n	8002218 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fb84 	bl	80028e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	6852      	ldr	r2, [r2, #4]
 80021ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	6892      	ldr	r2, [r2, #8]
 80021fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fc0b 	bl	8002a2c <UART_CheckIdleState>
 8002216:	4603      	mov	r3, r0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002220:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002224:	b08a      	sub	sp, #40	; 0x28
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	4313      	orrs	r3, r2
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6819      	ldr	r1, [r3, #0]
 8002258:	4bb7      	ldr	r3, [pc, #732]	; (8002538 <UART_SetConfig+0x318>)
 800225a:	400b      	ands	r3, r1
 800225c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800225e:	430b      	orrs	r3, r1
 8002260:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	6852      	ldr	r2, [r2, #4]
 800226c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68d2      	ldr	r2, [r2, #12]
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4aae      	ldr	r2, [pc, #696]	; (800253c <UART_SetConfig+0x31c>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d004      	beq.n	8002292 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228e:	4313      	orrs	r3, r2
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	6892      	ldr	r2, [r2, #8]
 800229c:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80022a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a2:	430a      	orrs	r2, r1
 80022a4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4aa5      	ldr	r2, [pc, #660]	; (8002540 <UART_SetConfig+0x320>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d126      	bne.n	80022fe <UART_SetConfig+0xde>
 80022b0:	4ba4      	ldr	r3, [pc, #656]	; (8002544 <UART_SetConfig+0x324>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d81a      	bhi.n	80022f4 <UART_SetConfig+0xd4>
 80022be:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <UART_SetConfig+0xa4>)
 80022c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	080022e5 	.word	0x080022e5
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022ed 	.word	0x080022ed
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022da:	e105      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80022dc:	2302      	movs	r3, #2
 80022de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022e2:	e101      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80022e4:	2304      	movs	r3, #4
 80022e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022ea:	e0fd      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80022ec:	2308      	movs	r3, #8
 80022ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022f2:	e0f9      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80022f4:	2310      	movs	r3, #16
 80022f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022fa:	bf00      	nop
 80022fc:	e0f4      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a91      	ldr	r2, [pc, #580]	; (8002548 <UART_SetConfig+0x328>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d138      	bne.n	800237a <UART_SetConfig+0x15a>
 8002308:	4b8e      	ldr	r3, [pc, #568]	; (8002544 <UART_SetConfig+0x324>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b0c      	cmp	r3, #12
 8002314:	d82c      	bhi.n	8002370 <UART_SetConfig+0x150>
 8002316:	a201      	add	r2, pc, #4	; (adr r2, 800231c <UART_SetConfig+0xfc>)
 8002318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231c:	08002351 	.word	0x08002351
 8002320:	08002371 	.word	0x08002371
 8002324:	08002371 	.word	0x08002371
 8002328:	08002371 	.word	0x08002371
 800232c:	08002361 	.word	0x08002361
 8002330:	08002371 	.word	0x08002371
 8002334:	08002371 	.word	0x08002371
 8002338:	08002371 	.word	0x08002371
 800233c:	08002359 	.word	0x08002359
 8002340:	08002371 	.word	0x08002371
 8002344:	08002371 	.word	0x08002371
 8002348:	08002371 	.word	0x08002371
 800234c:	08002369 	.word	0x08002369
 8002350:	2300      	movs	r3, #0
 8002352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002356:	e0c7      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002358:	2302      	movs	r3, #2
 800235a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800235e:	e0c3      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002360:	2304      	movs	r3, #4
 8002362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002366:	e0bf      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002368:	2308      	movs	r3, #8
 800236a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800236e:	e0bb      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002370:	2310      	movs	r3, #16
 8002372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002376:	bf00      	nop
 8002378:	e0b6      	b.n	80024e8 <UART_SetConfig+0x2c8>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a73      	ldr	r2, [pc, #460]	; (800254c <UART_SetConfig+0x32c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d125      	bne.n	80023d0 <UART_SetConfig+0x1b0>
 8002384:	4b6f      	ldr	r3, [pc, #444]	; (8002544 <UART_SetConfig+0x324>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800238e:	2b10      	cmp	r3, #16
 8002390:	d011      	beq.n	80023b6 <UART_SetConfig+0x196>
 8002392:	2b10      	cmp	r3, #16
 8002394:	d802      	bhi.n	800239c <UART_SetConfig+0x17c>
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <UART_SetConfig+0x186>
 800239a:	e014      	b.n	80023c6 <UART_SetConfig+0x1a6>
 800239c:	2b20      	cmp	r3, #32
 800239e:	d006      	beq.n	80023ae <UART_SetConfig+0x18e>
 80023a0:	2b30      	cmp	r3, #48	; 0x30
 80023a2:	d00c      	beq.n	80023be <UART_SetConfig+0x19e>
 80023a4:	e00f      	b.n	80023c6 <UART_SetConfig+0x1a6>
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ac:	e09c      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80023ae:	2302      	movs	r3, #2
 80023b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023b4:	e098      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80023b6:	2304      	movs	r3, #4
 80023b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023bc:	e094      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80023be:	2308      	movs	r3, #8
 80023c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023c4:	e090      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80023c6:	2310      	movs	r3, #16
 80023c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023cc:	bf00      	nop
 80023ce:	e08b      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5e      	ldr	r2, [pc, #376]	; (8002550 <UART_SetConfig+0x330>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d125      	bne.n	8002426 <UART_SetConfig+0x206>
 80023da:	4b5a      	ldr	r3, [pc, #360]	; (8002544 <UART_SetConfig+0x324>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80023e4:	2b40      	cmp	r3, #64	; 0x40
 80023e6:	d011      	beq.n	800240c <UART_SetConfig+0x1ec>
 80023e8:	2b40      	cmp	r3, #64	; 0x40
 80023ea:	d802      	bhi.n	80023f2 <UART_SetConfig+0x1d2>
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <UART_SetConfig+0x1dc>
 80023f0:	e014      	b.n	800241c <UART_SetConfig+0x1fc>
 80023f2:	2b80      	cmp	r3, #128	; 0x80
 80023f4:	d006      	beq.n	8002404 <UART_SetConfig+0x1e4>
 80023f6:	2bc0      	cmp	r3, #192	; 0xc0
 80023f8:	d00c      	beq.n	8002414 <UART_SetConfig+0x1f4>
 80023fa:	e00f      	b.n	800241c <UART_SetConfig+0x1fc>
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002402:	e071      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002404:	2302      	movs	r3, #2
 8002406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800240a:	e06d      	b.n	80024e8 <UART_SetConfig+0x2c8>
 800240c:	2304      	movs	r3, #4
 800240e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002412:	e069      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002414:	2308      	movs	r3, #8
 8002416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800241a:	e065      	b.n	80024e8 <UART_SetConfig+0x2c8>
 800241c:	2310      	movs	r3, #16
 800241e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002422:	bf00      	nop
 8002424:	e060      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a4a      	ldr	r2, [pc, #296]	; (8002554 <UART_SetConfig+0x334>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d129      	bne.n	8002484 <UART_SetConfig+0x264>
 8002430:	4b44      	ldr	r3, [pc, #272]	; (8002544 <UART_SetConfig+0x324>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800243a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243e:	d014      	beq.n	800246a <UART_SetConfig+0x24a>
 8002440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002444:	d802      	bhi.n	800244c <UART_SetConfig+0x22c>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <UART_SetConfig+0x23a>
 800244a:	e016      	b.n	800247a <UART_SetConfig+0x25a>
 800244c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002450:	d007      	beq.n	8002462 <UART_SetConfig+0x242>
 8002452:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002456:	d00c      	beq.n	8002472 <UART_SetConfig+0x252>
 8002458:	e00f      	b.n	800247a <UART_SetConfig+0x25a>
 800245a:	2300      	movs	r3, #0
 800245c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002460:	e042      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002462:	2302      	movs	r3, #2
 8002464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002468:	e03e      	b.n	80024e8 <UART_SetConfig+0x2c8>
 800246a:	2304      	movs	r3, #4
 800246c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002470:	e03a      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002472:	2308      	movs	r3, #8
 8002474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002478:	e036      	b.n	80024e8 <UART_SetConfig+0x2c8>
 800247a:	2310      	movs	r3, #16
 800247c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002480:	bf00      	nop
 8002482:	e031      	b.n	80024e8 <UART_SetConfig+0x2c8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a2c      	ldr	r2, [pc, #176]	; (800253c <UART_SetConfig+0x31c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d129      	bne.n	80024e2 <UART_SetConfig+0x2c2>
 800248e:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <UART_SetConfig+0x324>)
 8002490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249c:	d014      	beq.n	80024c8 <UART_SetConfig+0x2a8>
 800249e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a2:	d802      	bhi.n	80024aa <UART_SetConfig+0x28a>
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <UART_SetConfig+0x298>
 80024a8:	e016      	b.n	80024d8 <UART_SetConfig+0x2b8>
 80024aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024ae:	d007      	beq.n	80024c0 <UART_SetConfig+0x2a0>
 80024b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80024b4:	d00c      	beq.n	80024d0 <UART_SetConfig+0x2b0>
 80024b6:	e00f      	b.n	80024d8 <UART_SetConfig+0x2b8>
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024be:	e013      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80024c0:	2302      	movs	r3, #2
 80024c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024c6:	e00f      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80024c8:	2304      	movs	r3, #4
 80024ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024ce:	e00b      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80024d0:	2308      	movs	r3, #8
 80024d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024d6:	e007      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80024d8:	2310      	movs	r3, #16
 80024da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80024de:	bf00      	nop
 80024e0:	e002      	b.n	80024e8 <UART_SetConfig+0x2c8>
 80024e2:	2310      	movs	r3, #16
 80024e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a13      	ldr	r2, [pc, #76]	; (800253c <UART_SetConfig+0x31c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	f040 80f1 	bne.w	80026d6 <UART_SetConfig+0x4b6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80024f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d837      	bhi.n	800256c <UART_SetConfig+0x34c>
 80024fc:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <UART_SetConfig+0x2e4>)
 80024fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002502:	bf00      	nop
 8002504:	08002529 	.word	0x08002529
 8002508:	0800256d 	.word	0x0800256d
 800250c:	08002531 	.word	0x08002531
 8002510:	0800256d 	.word	0x0800256d
 8002514:	0800255d 	.word	0x0800255d
 8002518:	0800256d 	.word	0x0800256d
 800251c:	0800256d 	.word	0x0800256d
 8002520:	0800256d 	.word	0x0800256d
 8002524:	08002565 	.word	0x08002565
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002528:	f7ff f8f0 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 800252c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800252e:	e020      	b.n	8002572 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <UART_SetConfig+0x338>)
 8002532:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002534:	e01d      	b.n	8002572 <UART_SetConfig+0x352>
 8002536:	bf00      	nop
 8002538:	efff69f3 	.word	0xefff69f3
 800253c:	40008000 	.word	0x40008000
 8002540:	40013800 	.word	0x40013800
 8002544:	40021000 	.word	0x40021000
 8002548:	40004400 	.word	0x40004400
 800254c:	40004800 	.word	0x40004800
 8002550:	40004c00 	.word	0x40004c00
 8002554:	40005000 	.word	0x40005000
 8002558:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800255c:	f7ff f840 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 8002560:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002562:	e006      	b.n	8002572 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002568:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800256a:	e002      	b.n	8002572 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	76fb      	strb	r3, [r7, #27]
        break;
 8002570:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 81ab 	beq.w	80028d0 <UART_SetConfig+0x6b0>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	441a      	add	r2, r3
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	429a      	cmp	r2, r3
 8002588:	d805      	bhi.n	8002596 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	429a      	cmp	r2, r3
 8002594:	d202      	bcs.n	800259c <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	76fb      	strb	r3, [r7, #27]
 800259a:	e199      	b.n	80028d0 <UART_SetConfig+0x6b0>
      }
      else
      {
        switch (clocksource)
 800259c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	f200 8085 	bhi.w	80026b0 <UART_SetConfig+0x490>
 80025a6:	a201      	add	r2, pc, #4	; (adr r2, 80025ac <UART_SetConfig+0x38c>)
 80025a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025ac:	080025d1 	.word	0x080025d1
 80025b0:	080026b1 	.word	0x080026b1
 80025b4:	08002613 	.word	0x08002613
 80025b8:	080026b1 	.word	0x080026b1
 80025bc:	08002647 	.word	0x08002647
 80025c0:	080026b1 	.word	0x080026b1
 80025c4:	080026b1 	.word	0x080026b1
 80025c8:	080026b1 	.word	0x080026b1
 80025cc:	08002687 	.word	0x08002687
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80025d0:	f7ff f89c 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 80025d4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f04f 0400 	mov.w	r4, #0
 80025dc:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80025e0:	ea49 6913 	orr.w	r9, r9, r3, lsr #24
 80025e4:	ea4f 2803 	mov.w	r8, r3, lsl #8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	085b      	lsrs	r3, r3, #1
 80025ee:	f04f 0400 	mov.w	r4, #0
 80025f2:	eb18 0003 	adds.w	r0, r8, r3
 80025f6:	eb49 0104 	adc.w	r1, r9, r4
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f04f 0400 	mov.w	r4, #0
 8002602:	461a      	mov	r2, r3
 8002604:	4623      	mov	r3, r4
 8002606:	f7fd fddf 	bl	80001c8 <__aeabi_uldivmod>
 800260a:	4603      	mov	r3, r0
 800260c:	460c      	mov	r4, r1
 800260e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002610:	e051      	b.n	80026b6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	f04f 0400 	mov.w	r4, #0
 800261c:	49aa      	ldr	r1, [pc, #680]	; (80028c8 <UART_SetConfig+0x6a8>)
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	eb13 0801 	adds.w	r8, r3, r1
 8002626:	eb44 0902 	adc.w	r9, r4, r2
 800262a:	4640      	mov	r0, r8
 800262c:	4649      	mov	r1, r9
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f04f 0400 	mov.w	r4, #0
 8002636:	461a      	mov	r2, r3
 8002638:	4623      	mov	r3, r4
 800263a:	f7fd fdc5 	bl	80001c8 <__aeabi_uldivmod>
 800263e:	4603      	mov	r3, r0
 8002640:	460c      	mov	r4, r1
 8002642:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002644:	e037      	b.n	80026b6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8002646:	f7fe ffcb 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 800264a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	461a      	mov	r2, r3
 8002650:	f04f 0300 	mov.w	r3, #0
 8002654:	021d      	lsls	r5, r3, #8
 8002656:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 800265a:	0214      	lsls	r4, r2, #8
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	085b      	lsrs	r3, r3, #1
 8002662:	461a      	mov	r2, r3
 8002664:	f04f 0300 	mov.w	r3, #0
 8002668:	18a0      	adds	r0, r4, r2
 800266a:	eb45 0103 	adc.w	r1, r5, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f04f 0400 	mov.w	r4, #0
 8002676:	461a      	mov	r2, r3
 8002678:	4623      	mov	r3, r4
 800267a:	f7fd fda5 	bl	80001c8 <__aeabi_uldivmod>
 800267e:	4603      	mov	r3, r0
 8002680:	460c      	mov	r4, r1
 8002682:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002684:	e017      	b.n	80026b6 <UART_SetConfig+0x496>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	f04f 0400 	mov.w	r4, #0
 8002690:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002694:	f144 0100 	adc.w	r1, r4, #0
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f04f 0400 	mov.w	r4, #0
 80026a0:	461a      	mov	r2, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	f7fd fd90 	bl	80001c8 <__aeabi_uldivmod>
 80026a8:	4603      	mov	r3, r0
 80026aa:	460c      	mov	r4, r1
 80026ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80026ae:	e002      	b.n	80026b6 <UART_SetConfig+0x496>
          default:
            ret = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	76fb      	strb	r3, [r7, #27]
            break;
 80026b4:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026bc:	d308      	bcc.n	80026d0 <UART_SetConfig+0x4b0>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026c4:	d204      	bcs.n	80026d0 <UART_SetConfig+0x4b0>
        {
          huart->Instance->BRR = usartdiv;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	e0ff      	b.n	80028d0 <UART_SetConfig+0x6b0>
        }
        else
        {
          ret = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	76fb      	strb	r3, [r7, #27]
 80026d4:	e0fc      	b.n	80028d0 <UART_SetConfig+0x6b0>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026de:	f040 8083 	bne.w	80027e8 <UART_SetConfig+0x5c8>
  {
    switch (clocksource)
 80026e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d85e      	bhi.n	80027a8 <UART_SetConfig+0x588>
 80026ea:	a201      	add	r2, pc, #4	; (adr r2, 80026f0 <UART_SetConfig+0x4d0>)
 80026ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f0:	08002715 	.word	0x08002715
 80026f4:	08002735 	.word	0x08002735
 80026f8:	08002755 	.word	0x08002755
 80026fc:	080027a9 	.word	0x080027a9
 8002700:	08002771 	.word	0x08002771
 8002704:	080027a9 	.word	0x080027a9
 8002708:	080027a9 	.word	0x080027a9
 800270c:	080027a9 	.word	0x080027a9
 8002710:	08002791 	.word	0x08002791
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002714:	f7fe fffa 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8002718:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	005a      	lsls	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	441a      	add	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	fbb2 f3f3 	udiv	r3, r2, r3
 800272e:	b29b      	uxth	r3, r3
 8002730:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002732:	e03c      	b.n	80027ae <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002734:	f7ff f800 	bl	8001738 <HAL_RCC_GetPCLK2Freq>
 8002738:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	005a      	lsls	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	441a      	add	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	b29b      	uxth	r3, r3
 8002750:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002752:	e02c      	b.n	80027ae <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800275e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6852      	ldr	r2, [r2, #4]
 8002766:	fbb3 f3f2 	udiv	r3, r3, r2
 800276a:	b29b      	uxth	r3, r3
 800276c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800276e:	e01e      	b.n	80027ae <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002770:	f7fe ff36 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 8002774:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	005a      	lsls	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	085b      	lsrs	r3, r3, #1
 8002780:	441a      	add	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	b29b      	uxth	r3, r3
 800278c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800278e:	e00e      	b.n	80027ae <UART_SetConfig+0x58e>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80027a6:	e002      	b.n	80027ae <UART_SetConfig+0x58e>
      default:
        ret = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	76fb      	strb	r3, [r7, #27]
        break;
 80027ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	d916      	bls.n	80027e2 <UART_SetConfig+0x5c2>
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ba:	d212      	bcs.n	80027e2 <UART_SetConfig+0x5c2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	f023 030f 	bic.w	r3, r3, #15
 80027c4:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	89fb      	ldrh	r3, [r7, #14]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	89fa      	ldrh	r2, [r7, #14]
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	e076      	b.n	80028d0 <UART_SetConfig+0x6b0>
    }
    else
    {
      ret = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	76fb      	strb	r3, [r7, #27]
 80027e6:	e073      	b.n	80028d0 <UART_SetConfig+0x6b0>
    }
  }
  else
  {
    switch (clocksource)
 80027e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d85c      	bhi.n	80028aa <UART_SetConfig+0x68a>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <UART_SetConfig+0x5d8>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	0800281d 	.word	0x0800281d
 80027fc:	0800283b 	.word	0x0800283b
 8002800:	08002859 	.word	0x08002859
 8002804:	080028ab 	.word	0x080028ab
 8002808:	08002875 	.word	0x08002875
 800280c:	080028ab 	.word	0x080028ab
 8002810:	080028ab 	.word	0x080028ab
 8002814:	080028ab 	.word	0x080028ab
 8002818:	08002893 	.word	0x08002893
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800281c:	f7fe ff76 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8002820:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	085a      	lsrs	r2, r3, #1
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	441a      	add	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	fbb2 f3f3 	udiv	r3, r2, r3
 8002834:	b29b      	uxth	r3, r3
 8002836:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002838:	e03a      	b.n	80028b0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800283a:	f7fe ff7d 	bl	8001738 <HAL_RCC_GetPCLK2Freq>
 800283e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	085a      	lsrs	r2, r3, #1
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	441a      	add	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	b29b      	uxth	r3, r3
 8002854:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002856:	e02b      	b.n	80028b0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002862:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6852      	ldr	r2, [r2, #4]
 800286a:	fbb3 f3f2 	udiv	r3, r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002872:	e01d      	b.n	80028b0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002874:	f7fe feb4 	bl	80015e0 <HAL_RCC_GetSysClockFreq>
 8002878:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	085a      	lsrs	r2, r3, #1
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	441a      	add	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	b29b      	uxth	r3, r3
 800288e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002890:	e00e      	b.n	80028b0 <UART_SetConfig+0x690>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	085b      	lsrs	r3, r3, #1
 8002898:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028a8:	e002      	b.n	80028b0 <UART_SetConfig+0x690>
      default:
        ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	76fb      	strb	r3, [r7, #27]
        break;
 80028ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b0f      	cmp	r3, #15
 80028b4:	d90a      	bls.n	80028cc <UART_SetConfig+0x6ac>
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028bc:	d206      	bcs.n	80028cc <UART_SetConfig+0x6ac>
    {
      huart->Instance->BRR = usartdiv;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	e003      	b.n	80028d0 <UART_SetConfig+0x6b0>
 80028c8:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80028dc:	7efb      	ldrb	r3, [r7, #27]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3728      	adds	r7, #40	; 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080028e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	6852      	ldr	r2, [r2, #4]
 8002906:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	6852      	ldr	r2, [r2, #4]
 8002928:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002930:	430a      	orrs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	6812      	ldr	r2, [r2, #0]
 8002948:	6852      	ldr	r2, [r2, #4]
 800294a:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	6852      	ldr	r2, [r2, #4]
 800296c:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	6892      	ldr	r2, [r2, #8]
 800298e:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	6892      	ldr	r2, [r2, #8]
 80029b0:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01a      	beq.n	80029fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	6852      	ldr	r2, [r2, #4]
 80029d2:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e6:	d10a      	bne.n	80029fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	6852      	ldr	r2, [r2, #4]
 80029f2:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	6852      	ldr	r2, [r2, #4]
 8002a14:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	605a      	str	r2, [r3, #4]
  }
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002a3a:	f7fd fdb9 	bl	80005b0 <HAL_GetTick>
 8002a3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b08      	cmp	r3, #8
 8002a4c:	d10e      	bne.n	8002a6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f82a 	bl	8002ab6 <UART_WaitOnFlagUntilTimeout>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e020      	b.n	8002aae <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d10e      	bne.n	8002a98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f814 	bl	8002ab6 <UART_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e00a      	b.n	8002aae <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b084      	sub	sp, #16
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	603b      	str	r3, [r7, #0]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ac6:	e05d      	b.n	8002b84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ace:	d059      	beq.n	8002b84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad0:	f7fd fd6e 	bl	80005b0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d802      	bhi.n	8002ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11b      	bne.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002af4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	6892      	ldr	r2, [r2, #8]
 8002b00:	f022 0201 	bic.w	r2, r2, #1
 8002b04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2220      	movs	r2, #32
 8002b10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e042      	b.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d02b      	beq.n	8002b84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b3a:	d123      	bne.n	8002b84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b44:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002b54:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	6812      	ldr	r2, [r2, #0]
 8002b5e:	6892      	ldr	r2, [r2, #8]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e00f      	b.n	8002ba4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	401a      	ands	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d092      	beq.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	4a2b      	ldr	r2, [pc, #172]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc8:	f043 0304 	orr.w	r3, r3, #4
 8002bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bce:	4b28      	ldr	r3, [pc, #160]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bda:	4a25      	ldr	r2, [pc, #148]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002bdc:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf2:	4a1f      	ldr	r2, [pc, #124]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002bf4:	4b1e      	ldr	r3, [pc, #120]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	4a19      	ldr	r2, [pc, #100]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c10:	f043 0302 	orr.w	r3, r3, #2
 8002c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c16:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_GPIO_Init+0xc4>)
 8002c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2120      	movs	r1, #32
 8002c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2a:	f7fd ff7b 	bl	8000b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c34:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <MX_GPIO_Init+0xc8>)
 8002c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	480d      	ldr	r0, [pc, #52]	; (8002c78 <MX_GPIO_Init+0xcc>)
 8002c44:	f7fd fdc6 	bl	80007d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c62:	f7fd fdb7 	bl	80007d4 <HAL_GPIO_Init>

}
 8002c66:	bf00      	nop
 8002c68:	3728      	adds	r7, #40	; 0x28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	10210000 	.word	0x10210000
 8002c78:	48000800 	.word	0x48000800

08002c7c <foo>:

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
	void foo(void){
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
		int local_variable;
		++lsb;
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <foo+0x30>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3301      	adds	r3, #1
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <foo+0x30>)
 8002c88:	6013      	str	r3, [r2, #0]
 		if(lsb>4){
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <foo+0x30>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d907      	bls.n	8002ca2 <foo+0x26>
			lsb=0;
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <foo+0x30>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
			++msb;
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <foo+0x34>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <foo+0x34>)
 8002ca0:	6013      	str	r3, [r2, #0]
		}

	}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	2000002c 	.word	0x2000002c
 8002cb0:	20000030 	.word	0x20000030

08002cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cb8:	f7fd fc0e 	bl	80004d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002cbc:	f000 f810 	bl	8002ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002cc0:	f7ff ff74 	bl	8002bac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002cc4:	f000 f910 	bl	8002ee8 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002cc8:	2120      	movs	r1, #32
 8002cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cce:	f7fd ff41 	bl	8000b54 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8002cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cd6:	f7fd fc77 	bl	80005c8 <HAL_Delay>
	  foo();
 8002cda:	f7ff ffcf 	bl	8002c7c <foo>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002cde:	e7f3      	b.n	8002cc8 <main+0x14>

08002ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b0b8      	sub	sp, #224	; 0xe0
 8002ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ce6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cea:	2244      	movs	r2, #68	; 0x44
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f9ba 	bl	8003068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cf4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d04:	463b      	mov	r3, r7
 8002d06:	2288      	movs	r2, #136	; 0x88
 8002d08:	2100      	movs	r1, #0
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 f9ac 	bl	8003068 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d10:	2302      	movs	r3, #2
 8002d12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d1e:	2310      	movs	r3, #16
 8002d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d24:	2302      	movs	r3, #2
 8002d26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002d36:	230a      	movs	r3, #10
 8002d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002d3c:	2307      	movs	r3, #7
 8002d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002d42:	2302      	movs	r3, #2
 8002d44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd ff7c 	bl	8000c50 <HAL_RCC_OscConfig>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002d5e:	f000 f834 	bl	8002dca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d62:	230f      	movs	r3, #15
 8002d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d80:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d84:	2104      	movs	r1, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fb48 	bl	800141c <HAL_RCC_ClockConfig>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002d92:	f000 f81a 	bl	8002dca <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d96:	2302      	movs	r3, #2
 8002d98:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe fd3f 	bl	8001824 <HAL_RCCEx_PeriphCLKConfig>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002dac:	f000 f80d 	bl	8002dca <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002db0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002db4:	f7fd fef6 	bl	8000ba4 <HAL_PWREx_ControlVoltageScaling>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002dbe:	f000 f804 	bl	8002dca <Error_Handler>
  }
}
 8002dc2:	bf00      	nop
 8002dc4:	37e0      	adds	r7, #224	; 0xe0
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <HAL_MspInit+0x44>)
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <HAL_MspInit+0x44>)
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6613      	str	r3, [r2, #96]	; 0x60
 8002dea:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_MspInit+0x44>)
 8002dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <HAL_MspInit+0x44>)
 8002df8:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <HAL_MspInit+0x44>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_MspInit+0x44>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	40021000 	.word	0x40021000

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e74:	f7fd fb8a 	bl	800058c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e80:	4a17      	ldr	r2, [pc, #92]	; (8002ee0 <SystemInit+0x64>)
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <SystemInit+0x64>)
 8002e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e90:	4a14      	ldr	r2, [pc, #80]	; (8002ee4 <SystemInit+0x68>)
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <SystemInit+0x68>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f043 0301 	orr.w	r3, r3, #1
 8002e9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e9c:	4b11      	ldr	r3, [pc, #68]	; (8002ee4 <SystemInit+0x68>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002ea2:	4a10      	ldr	r2, [pc, #64]	; (8002ee4 <SystemInit+0x68>)
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <SystemInit+0x68>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002eac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002eb0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <SystemInit+0x68>)
 8002eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eb8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <SystemInit+0x68>)
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <SystemInit+0x68>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002ec6:	4b07      	ldr	r3, [pc, #28]	; (8002ee4 <SystemInit+0x68>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SystemInit+0x64>)
 8002ece:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ed2:	609a      	str	r2, [r3, #8]
#endif
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	e000ed00 	.word	0xe000ed00
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002eee:	4a15      	ldr	r2, [pc, #84]	; (8002f44 <MX_USART2_UART_Init+0x5c>)
 8002ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f0e:	220c      	movs	r2, #12
 8002f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_USART2_UART_Init+0x58>)
 8002f2c:	f7ff f92a 	bl	8002184 <HAL_UART_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f36:	f7ff ff48 	bl	8002dca <Error_Handler>
  }

}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000034 	.word	0x20000034
 8002f44:	40004400 	.word	0x40004400

08002f48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_UART_MspInit+0x7c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d128      	bne.n	8002fbc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f6a:	4a17      	ldr	r2, [pc, #92]	; (8002fc8 <HAL_UART_MspInit+0x80>)
 8002f6c:	4b16      	ldr	r3, [pc, #88]	; (8002fc8 <HAL_UART_MspInit+0x80>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f74:	6593      	str	r3, [r2, #88]	; 0x58
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <HAL_UART_MspInit+0x80>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f82:	4a11      	ldr	r2, [pc, #68]	; (8002fc8 <HAL_UART_MspInit+0x80>)
 8002f84:	4b10      	ldr	r3, [pc, #64]	; (8002fc8 <HAL_UART_MspInit+0x80>)
 8002f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	; (8002fc8 <HAL_UART_MspInit+0x80>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002faa:	2307      	movs	r3, #7
 8002fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fae:	f107 0314 	add.w	r3, r7, #20
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fb8:	f7fd fc0c 	bl	80007d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3728      	adds	r7, #40	; 0x28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40004400 	.word	0x40004400
 8002fc8:	40021000 	.word	0x40021000

08002fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002fd0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002fd2:	e003      	b.n	8002fdc <LoopCopyDataInit>

08002fd4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002fd6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002fd8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002fda:	3104      	adds	r1, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002fdc:	480b      	ldr	r0, [pc, #44]	; (800300c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002fde:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002fe0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002fe2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002fe4:	d3f6      	bcc.n	8002fd4 <CopyDataInit>
	ldr	r2, =_sbss
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002fe8:	e002      	b.n	8002ff0 <LoopFillZerobss>

08002fea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002fea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002fec:	f842 3b04 	str.w	r3, [r2], #4

08002ff0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ff0:	4b09      	ldr	r3, [pc, #36]	; (8003018 <LoopForever+0x16>)
	cmp	r2, r3
 8002ff2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ff4:	d3f9      	bcc.n	8002fea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002ff6:	f7ff ff41 	bl	8002e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f000 f811 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ffe:	f7ff fe59 	bl	8002cb4 <main>

08003002 <LoopForever>:

LoopForever:
    b LoopForever
 8003002:	e7fe      	b.n	8003002 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003004:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003008:	080030e8 	.word	0x080030e8
	ldr	r0, =_sdata
 800300c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003010:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003014:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003018:	200000b4 	.word	0x200000b4

0800301c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC1_2_IRQHandler>
	...

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	4e0d      	ldr	r6, [pc, #52]	; (8003058 <__libc_init_array+0x38>)
 8003024:	4c0d      	ldr	r4, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003026:	1ba4      	subs	r4, r4, r6
 8003028:	10a4      	asrs	r4, r4, #2
 800302a:	2500      	movs	r5, #0
 800302c:	42a5      	cmp	r5, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	4e0b      	ldr	r6, [pc, #44]	; (8003060 <__libc_init_array+0x40>)
 8003032:	4c0c      	ldr	r4, [pc, #48]	; (8003064 <__libc_init_array+0x44>)
 8003034:	f000 f820 	bl	8003078 <_init>
 8003038:	1ba4      	subs	r4, r4, r6
 800303a:	10a4      	asrs	r4, r4, #2
 800303c:	2500      	movs	r5, #0
 800303e:	42a5      	cmp	r5, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003048:	4798      	blx	r3
 800304a:	3501      	adds	r5, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003052:	4798      	blx	r3
 8003054:	3501      	adds	r5, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	080030e0 	.word	0x080030e0
 800305c:	080030e0 	.word	0x080030e0
 8003060:	080030e0 	.word	0x080030e0
 8003064:	080030e4 	.word	0x080030e4

08003068 <memset>:
 8003068:	4402      	add	r2, r0
 800306a:	4603      	mov	r3, r0
 800306c:	4293      	cmp	r3, r2
 800306e:	d100      	bne.n	8003072 <memset+0xa>
 8003070:	4770      	bx	lr
 8003072:	f803 1b01 	strb.w	r1, [r3], #1
 8003076:	e7f9      	b.n	800306c <memset+0x4>

08003078 <_init>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr

08003084 <_fini>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr
